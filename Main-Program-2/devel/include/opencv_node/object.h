// Generated by gencpp from file opencv_node/object.msg
// DO NOT EDIT!


#ifndef OPENCV_NODE_MESSAGE_OBJECT_H
#define OPENCV_NODE_MESSAGE_OBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace opencv_node
{
template <class ContainerAllocator>
struct object_
{
  typedef object_<ContainerAllocator> Type;

  object_()
    : x_position(0)
    , y_position(0)
    , width(0)
    , height(0)
    , distance(0.0)
    , color_index(0)
    , object_type(0)  {
    }
  object_(const ContainerAllocator& _alloc)
    : x_position(0)
    , y_position(0)
    , width(0)
    , height(0)
    , distance(0.0)
    , color_index(0)
    , object_type(0)  {
  (void)_alloc;
    }



   typedef uint32_t _x_position_type;
  _x_position_type x_position;

   typedef uint32_t _y_position_type;
  _y_position_type y_position;

   typedef uint32_t _width_type;
  _width_type width;

   typedef uint32_t _height_type;
  _height_type height;

   typedef float _distance_type;
  _distance_type distance;

   typedef uint8_t _color_index_type;
  _color_index_type color_index;

   typedef uint8_t _object_type_type;
  _object_type_type object_type;




  typedef boost::shared_ptr< ::opencv_node::object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::opencv_node::object_<ContainerAllocator> const> ConstPtr;

}; // struct object_

typedef ::opencv_node::object_<std::allocator<void> > object;

typedef boost::shared_ptr< ::opencv_node::object > objectPtr;
typedef boost::shared_ptr< ::opencv_node::object const> objectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::opencv_node::object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::opencv_node::object_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace opencv_node

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'opencv_node': ['/home/pi/ieee-2019-electrical-software/Main-Program-2/src/opencv_node/msg', '/home/pi/ieee-2019-electrical-software/Main-Program-2/src/opencv_node/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::opencv_node::object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opencv_node::object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opencv_node::object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opencv_node::object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opencv_node::object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opencv_node::object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::opencv_node::object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ffacbbb937a845333e840b126fe6a12";
  }

  static const char* value(const ::opencv_node::object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ffacbbb937a8453ULL;
  static const uint64_t static_value2 = 0x33e840b126fe6a12ULL;
};

template<class ContainerAllocator>
struct DataType< ::opencv_node::object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "opencv_node/object";
  }

  static const char* value(const ::opencv_node::object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::opencv_node::object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 x_position\n\
uint32 y_position\n\
uint32 width\n\
uint32 height\n\
float32 distance\n\
uint8 color_index\n\
uint8 object_type\n\
";
  }

  static const char* value(const ::opencv_node::object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::opencv_node::object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_position);
      stream.next(m.y_position);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.distance);
      stream.next(m.color_index);
      stream.next(m.object_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::opencv_node::object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::opencv_node::object_<ContainerAllocator>& v)
  {
    s << indent << "x_position: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.x_position);
    s << indent << "y_position: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.y_position);
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "color_index: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.color_index);
    s << indent << "object_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.object_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENCV_NODE_MESSAGE_OBJECT_H
