# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from opencv_node/object.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class object(genpy.Message):
  _md5sum = "2ffacbbb937a845333e840b126fe6a12"
  _type = "opencv_node/object"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 x_position
uint32 y_position
uint32 width
uint32 height
float32 distance
uint8 color_index
uint8 object_type
"""
  __slots__ = ['x_position','y_position','width','height','distance','color_index','object_type']
  _slot_types = ['uint32','uint32','uint32','uint32','float32','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x_position,y_position,width,height,distance,color_index,object_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(object, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x_position is None:
        self.x_position = 0
      if self.y_position is None:
        self.y_position = 0
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.distance is None:
        self.distance = 0.
      if self.color_index is None:
        self.color_index = 0
      if self.object_type is None:
        self.object_type = 0
    else:
      self.x_position = 0
      self.y_position = 0
      self.width = 0
      self.height = 0
      self.distance = 0.
      self.color_index = 0
      self.object_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4If2B().pack(_x.x_position, _x.y_position, _x.width, _x.height, _x.distance, _x.color_index, _x.object_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.x_position, _x.y_position, _x.width, _x.height, _x.distance, _x.color_index, _x.object_type,) = _get_struct_4If2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4If2B().pack(_x.x_position, _x.y_position, _x.width, _x.height, _x.distance, _x.color_index, _x.object_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.x_position, _x.y_position, _x.width, _x.height, _x.distance, _x.color_index, _x.object_type,) = _get_struct_4If2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4If2B = None
def _get_struct_4If2B():
    global _struct_4If2B
    if _struct_4If2B is None:
        _struct_4If2B = struct.Struct("<4If2B")
    return _struct_4If2B
